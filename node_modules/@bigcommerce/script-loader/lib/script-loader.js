"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ScriptLoader = (function () {
    function ScriptLoader(_browserSupport, _requestSender) {
        this._browserSupport = _browserSupport;
        this._requestSender = _requestSender;
        this._scripts = {};
        this._preloadedScripts = {};
    }
    ScriptLoader.prototype.loadScript = function (src, options) {
        var _this = this;
        if (!this._scripts[src]) {
            this._scripts[src] = new Promise(function (resolve, reject) {
                var script = document.createElement('script');
                var _a = options || {}, _b = _a.async, async = _b === void 0 ? false : _b, _c = _a.attributes, attributes = _c === void 0 ? {} : _c;
                Object.keys(attributes)
                    .forEach(function (key) {
                    script.setAttribute(key, attributes[key]);
                });
                script.onload = function () { return resolve(); };
                script.onreadystatechange = function () { return resolve(); };
                script.onerror = function (event) {
                    delete _this._scripts[src];
                    reject(event);
                };
                script.async = async;
                script.src = src;
                document.body.appendChild(script);
            });
        }
        return this._scripts[src];
    };
    ScriptLoader.prototype.loadScripts = function (urls, options) {
        var _this = this;
        return Promise.all(urls.map(function (url) { return _this.loadScript(url, options); }))
            .then(function () { return undefined; });
    };
    ScriptLoader.prototype.preloadScript = function (url, options) {
        var _this = this;
        if (!this._preloadedScripts[url]) {
            this._preloadedScripts[url] = new Promise(function (resolve, reject) {
                var _a = (options || {}).prefetch, prefetch = _a === void 0 ? false : _a;
                var rel = prefetch ? 'prefetch' : 'preload';
                if (_this._browserSupport.canSupportRel(rel)) {
                    var preloadedScript = document.createElement('link');
                    preloadedScript.as = 'script';
                    preloadedScript.rel = rel;
                    preloadedScript.href = url;
                    preloadedScript.onload = function () {
                        resolve();
                    };
                    preloadedScript.onerror = function () {
                        delete _this._preloadedScripts[url];
                        reject();
                    };
                    document.head.appendChild(preloadedScript);
                }
                else {
                    _this._requestSender.get(url, {
                        credentials: false,
                        headers: { Accept: 'application/javascript' },
                    })
                        .then(function () { return resolve(); })
                        .catch(reject);
                }
            });
        }
        return this._preloadedScripts[url];
    };
    ScriptLoader.prototype.preloadScripts = function (urls, options) {
        var _this = this;
        return Promise.all(urls.map(function (url) { return _this.preloadScript(url, options); }))
            .then(function () { return undefined; });
    };
    return ScriptLoader;
}());
exports.default = ScriptLoader;
//# sourceMappingURL=script-loader.js.map