"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var StylesheetLoader = (function () {
    function StylesheetLoader(_browserSupport, _requestSender) {
        this._browserSupport = _browserSupport;
        this._requestSender = _requestSender;
        this._stylesheets = {};
        this._preloadedStylesheets = {};
    }
    StylesheetLoader.prototype.loadStylesheet = function (src, options) {
        var _this = this;
        if (!this._stylesheets[src]) {
            this._stylesheets[src] = new Promise(function (resolve, reject) {
                var stylesheet = document.createElement('link');
                var _a = (options || {}).prepend, prepend = _a === void 0 ? false : _a;
                stylesheet.onload = function () { return resolve(); };
                stylesheet.onerror = function (event) {
                    delete _this._stylesheets[src];
                    reject(event);
                };
                stylesheet.rel = 'stylesheet';
                stylesheet.href = src;
                if (prepend && document.head.children[0]) {
                    document.head.insertBefore(stylesheet, document.head.children[0]);
                }
                else {
                    document.head.appendChild(stylesheet);
                }
            });
        }
        return this._stylesheets[src];
    };
    StylesheetLoader.prototype.loadStylesheets = function (urls, options) {
        var _this = this;
        return Promise.all(urls.map(function (url) { return _this.loadStylesheet(url, options); }))
            .then(function () { return undefined; });
    };
    StylesheetLoader.prototype.preloadStylesheet = function (url, options) {
        var _this = this;
        if (!this._preloadedStylesheets[url]) {
            this._preloadedStylesheets[url] = new Promise(function (resolve, reject) {
                var _a = (options || {}).prefetch, prefetch = _a === void 0 ? false : _a;
                var rel = prefetch ? 'prefetch' : 'preload';
                if (_this._browserSupport.canSupportRel(rel)) {
                    var preloadedStylesheet = document.createElement('link');
                    preloadedStylesheet.as = 'style';
                    preloadedStylesheet.rel = prefetch ? 'prefetch' : 'preload';
                    preloadedStylesheet.href = url;
                    preloadedStylesheet.onload = function () {
                        resolve();
                    };
                    preloadedStylesheet.onerror = function (event) {
                        delete _this._preloadedStylesheets[url];
                        reject(event);
                    };
                    document.head.appendChild(preloadedStylesheet);
                }
                else {
                    _this._requestSender.get(url, {
                        credentials: false,
                        headers: { Accept: 'text/css' },
                    })
                        .then(function () { return resolve(); })
                        .catch(reject);
                }
            });
        }
        return this._preloadedStylesheets[url];
    };
    StylesheetLoader.prototype.preloadStylesheets = function (urls, options) {
        var _this = this;
        return Promise.all(urls.map(function (url) { return _this.preloadStylesheet(url, options); }))
            .then(function () { return undefined; });
    };
    return StylesheetLoader;
}());
exports.default = StylesheetLoader;
//# sourceMappingURL=stylesheet-loader.js.map