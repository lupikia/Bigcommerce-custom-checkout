{"version":3,"file":"combine-reducers.js","sourceRoot":"","sources":["../src/combine-reducers.ts"],"names":[],"mappings":";;AAAA,iCAAgC;AAChC,2CAA6C;AAK7C,yBACI,QAAqC,EACrC,OAAgC;IAExB,IAAA,kCAA4B,EAA5B,iDAA4B,CAAmB;IAEvD,OAAO,UAAC,KAAK,EAAE,MAAM;QACjB,OAAA,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,UAAC,MAAM,EAAE,GAAG;YACrC,IAAM,OAAO,GAAG,QAAQ,CAAC,GAAmB,CAAC,CAAC;YAC9C,IAAM,YAAY,GAAG,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,GAAmB,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;YACpE,IAAM,QAAQ,GAAG,OAAO,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;YAE/C,IAAI,aAAa,CAAC,YAAY,EAAE,QAAQ,CAAC,IAAI,MAAM,EAAE;gBACjD,OAAO,MAAM,CAAC;aACjB;YAED,OAAO,eAAM,CAAC,EAAE,EAAE,MAAM,YAAI,GAAC,GAAG,IAAG,QAAQ,MAAG,CAAC;;QACnD,CAAC,EAAE,KAAK,IAAI,EAAY,CAAC;IAVzB,CAUyB,CAAC;AAClC,CAAC;AAlBD,kCAkBC","sourcesContent":["import { assign } from 'lodash';\nimport * as shallowEqual from 'shallowequal';\n\nimport Action from './action';\nimport Reducer from './reducer';\n\nexport default function combineReducers<TState, TAction extends Action = Action>(\n    reducers: ReducerMap<TState, TAction>,\n    options?: CombineReducersOptions\n): Reducer<TState, TAction> {\n    const { equalityCheck = shallowEqual } = options || {};\n\n    return (state, action) =>\n        Object.keys(reducers).reduce((result, key) => {\n            const reducer = reducers[key as keyof TState];\n            const currentState = state ? state[key as keyof TState] : undefined;\n            const newState = reducer(currentState, action);\n\n            if (equalityCheck(currentState, newState) && result) {\n                return result;\n            }\n\n            return assign({}, result, { [key]: newState });\n        }, state || {} as TState);\n}\n\nexport type ReducerMap<TState, TAction extends Action = Action> = {\n    [Key in keyof TState]: Reducer<TState[Key], TAction>;\n};\n\nexport interface CombineReducersOptions {\n    equalityCheck?(valueA: any, valueB: any): boolean;\n}\n"]}