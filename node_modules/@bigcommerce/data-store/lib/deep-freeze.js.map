{"version":3,"file":"deep-freeze.js","sourceRoot":"","sources":["../src/deep-freeze.ts"],"names":[],"mappings":";;AAAA,iCAAuC;AACvC,2CAA6C;AAU7C,oBACI,MAAe,EACf,OAA8B;IAE9B,IAAI;QACM,IAAA,kBAAsE,EAApE,qBAA4B,EAA5B,mDAA4B,EAAE,qBAAoB,EAApB,2CAAoB,CAAmB;QAE7E,IAAI,eAAa,CAAC,MAAM,EAAE,eAAa,CAAC,IAAI,MAAM,CAAC,QAAQ,CAAC,eAAa,CAAC,EAAE;YACxE,OAAO,eAAkB,CAAC;SAC7B;QAED,IAAI,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,sBAAa,CAAC,MAAM,CAAC,CAAC,EAAE;YAC/E,OAAO,MAAM,CAAC;SACjB;QAED,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;YACvB,OAAO,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,UAAC,KAAK,EAAE,KAAK;gBACzC,OAAA,UAAU,CAAC,KAAK,EAAE;oBACd,aAAa,iBAAA;oBACb,aAAa,EAAE,KAAK,CAAC,OAAO,CAAC,eAAa,CAAC,CAAC,CAAC,CAAC,eAAa,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,SAAS;iBACjF,CAAC;YAHF,CAGE,CACL,CAAC,CAAC;SACN;QAED,OAAO,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,UAAC,MAAM,EAAE,GAAG;YACvE,MAAM,CAAC,GAAc,CAAC,GAAG,UAAU,CAAC,MAAM,CAAC,GAAc,CAAC,EAAE;gBACxD,aAAa,iBAAA;gBACb,aAAa,EAAE,eAAa,IAAI,eAAa,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC;oBAC9D,eAAqB,CAAC,GAAG,CAAC,CAAC,CAAC;oBAC7B,SAAS;aAChB,CAAC,CAAC;YAEH,OAAO,MAAM,CAAC;QAClB,CAAC,EAAE,EAAO,CAAC,CAAC,CAAC;KAChB;IAAC,OAAO,KAAK,EAAE;QAGZ,IAAI,KAAK,YAAY,SAAS,EAAE;YAC5B,OAAO,MAAM,CAAC;SACjB;QAED,MAAM,KAAK,CAAC;KACf;AACL,CAAC;AA3CD,6BA2CC","sourcesContent":["import { isPlainObject } from 'lodash';\nimport * as shallowEqual from 'shallowequal';\n\nexport interface DeepFreezeOptions<T> {\n    previousValue?: T;\n    equalityCheck?(valueA: any, valueB: any): boolean;\n}\n\nexport default function deepFreeze<T>(object: T[], options?: DeepFreezeOptions<T>): ReadonlyArray<T>;\nexport default function deepFreeze<T extends object>(object: T, options?: DeepFreezeOptions<T>): Readonly<T>;\nexport default function deepFreeze<T>(object: T, options?: DeepFreezeOptions<T>): T;\nexport default function deepFreeze<T>(\n    object: T[] | T,\n    options?: DeepFreezeOptions<T>\n): ReadonlyArray<T> | Readonly<T> | T {\n    try {\n        const { equalityCheck = shallowEqual, previousValue = null } = options || {};\n\n        if (equalityCheck(object, previousValue) && Object.isFrozen(previousValue)) {\n            return previousValue as T;\n        }\n\n        if (Object.isFrozen(object) || (!Array.isArray(object) && !isPlainObject(object))) {\n            return object;\n        }\n\n        if (Array.isArray(object)) {\n            return Object.freeze(object.map((value, index) =>\n                deepFreeze(value, {\n                    equalityCheck,\n                    previousValue: Array.isArray(previousValue) ? previousValue[index] : undefined,\n                })\n            ));\n        }\n\n        return Object.freeze(Object.getOwnPropertyNames(object).reduce((result, key) => {\n            result[key as keyof T] = deepFreeze(object[key as keyof T], {\n                equalityCheck,\n                previousValue: previousValue && previousValue.hasOwnProperty(key) ?\n                    (previousValue as any)[key] :\n                    undefined,\n            });\n\n            return result;\n        }, {} as T));\n    } catch (error) {\n        // Browsers that only support ES5 will throw `TypeError` when checking\n        // if a primitive value is frozen or trying to freeze a primitive value.\n        if (error instanceof TypeError) {\n            return object;\n        }\n\n        throw error;\n    }\n}\n"]}