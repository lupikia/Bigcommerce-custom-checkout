{"version":3,"file":"dispatchable-data-store.js","sourceRoot":"","sources":["../src/dispatchable-data-store.ts"],"names":[],"mappings":"","sourcesContent":["import { SubscribableOrPromise } from 'rxjs';\n\nimport Action from './action';\nimport ReadableDataStore from './readable-data-store';\nimport ThunkAction from './thunk-action';\n\nexport default interface DispatchableDataStore<TTransformedState, TAction extends Action = Action> extends\n    ReadableDataStore<TTransformedState> {\n    dispatch<TDispatchAction extends TAction>(\n        action: DispatchableAction<TDispatchAction, TTransformedState>,\n        options?: DispatchOptions\n    ): Promise<TTransformedState>;\n}\n\nexport interface DispatchOptions {\n    queueId?: string;\n}\n\nexport type DispatchableAction<TAction = Action, TState = any> = TAction |\n    SubscribableOrPromise<TAction> |\n    ThunkAction<TAction, TState>;\n"]}