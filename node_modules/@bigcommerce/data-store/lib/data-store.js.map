{"version":3,"file":"data-store.js","sourceRoot":"","sources":["../src/data-store.ts"],"names":[],"mappings":"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","sourcesContent":["import { merge } from 'lodash';\nimport {\n    defer,\n    from,\n    of,\n    throwError,\n    BehaviorSubject,\n    Observable,\n    Subject,\n    Subscribable,\n    SubscribableOrPromise\n} from 'rxjs';\nimport {\n    catchError,\n    concatMap,\n    distinctUntilChanged,\n    filter,\n    first,\n    map,\n    mergeMap,\n    scan,\n    skip,\n    tap,\n} from 'rxjs/operators';\nimport * as shallowEqual from 'shallowequal';\n\nimport Action from './action';\nimport deepFreeze from './deep-freeze';\nimport DispatchableDataStore, { DispatchableAction, DispatchOptions } from './dispatchable-data-store';\nimport isObservableActionLike from './is-observable-action-like';\nimport noopActionTransformer from './noop-action-transformer';\nimport noopStateTransformer from './noop-state-transformer';\nimport ReadableDataStore, { Filter, Subscriber, SubscribeOptions, Unsubscriber } from './readable-data-store';\nimport Reducer from './reducer';\nimport ThunkAction from './thunk-action';\n\nexport default class DataStore<TState, TAction extends Action = Action, TTransformedState = TState> implements\n    ReadableDataStore<TTransformedState>, DispatchableDataStore<TTransformedState, TAction> {\n    private _reducer: Reducer<TState, TAction>;\n    private _options: DataStoreOptions<TState, TAction, TTransformedState>;\n    private _notification$: Subject<TTransformedState>;\n    private _dispatchers: { [key: string]: Dispatcher<TAction> };\n    private _dispatchQueue$: Subject<Dispatcher<TAction>>;\n    private _state$: BehaviorSubject<TTransformedState>;\n    private _errors: { [key: string]: Subject<Error> };\n\n    constructor(\n        reducer: Reducer<TState, TAction>,\n        initialState: Partial<TState> = {},\n        options?: Partial<DataStoreOptions<TState, TAction, TTransformedState>>\n    ) {\n        this._reducer = reducer;\n        this._options = {\n            actionTransformer: noopActionTransformer,\n            equalityCheck: shallowEqual,\n            shouldWarnMutation: true,\n            stateTransformer: noopStateTransformer,\n            ...options,\n        };\n        this._state$ = new BehaviorSubject(this._options.stateTransformer(initialState as TState));\n        this._notification$ = new Subject();\n        this._dispatchers = {};\n        this._dispatchQueue$ = new Subject();\n        this._errors = {};\n\n        this._dispatchQueue$\n            .pipe(\n                mergeMap(dispatcher$ => dispatcher$.pipe(concatMap(action$ => action$))),\n                filter(action => !!action.type),\n                scan(\n                    (states: StateTuple<TState, TTransformedState>, action: TAction) =>\n                        this._transformStates(states, action),\n                    {\n                        state: initialState as TState,\n                        transformedState: this._state$.getValue(),\n                    }\n                ),\n                distinctUntilChanged(({ state: stateA }, { state: stateB }) =>\n                    this._options.equalityCheck(stateA, stateB)\n                ),\n                map(({ transformedState }) => transformedState)\n            )\n            .subscribe(this._state$);\n\n        this.dispatch({ type: 'INIT' } as TAction);\n    }\n\n    dispatch<TDispatchAction extends TAction>(\n        action: DispatchableAction<TDispatchAction, TTransformedState>,\n        options?: DispatchOptions\n    ): Promise<TTransformedState> {\n        if (isObservableActionLike(action)) {\n            return this._dispatchObservableAction(action, options);\n        }\n\n        if (typeof action === 'function') {\n            return this._dispatchThunkAction(action, options);\n        }\n\n        return this._dispatchAction(action);\n    }\n\n    getState(): TTransformedState {\n        return this._state$.getValue();\n    }\n\n    notifyState(): void {\n        this._notification$.next(this.getState());\n    }\n\n    subscribe(subscriber: Subscriber<TTransformedState>, ...filters: Array<Filter<TTransformedState>>): Unsubscriber;\n    subscribe(subscriber: Subscriber<TTransformedState>, options: SubscribeOptions<TTransformedState>): Unsubscriber;\n    subscribe(subscriber: Subscriber<TTransformedState>, ...args: any[]): Unsubscriber {\n        const options: SubscribeOptions<TTransformedState> = typeof args[0] === 'object' ? args[0] : undefined;\n        const filters: Array<Filter<TTransformedState>> = options ? (options.filters || []) : args;\n\n        let state$: Observable<TTransformedState> = this._state$;\n\n        if (filters.length > 0) {\n            state$ = state$.pipe(\n                distinctUntilChanged((stateA, stateB) =>\n                    filters.every(filterFn =>\n                        this._options.equalityCheck(filterFn(stateA), filterFn(stateB))\n                    )\n                )\n            );\n        }\n\n        if (options && options.initial === false) {\n            state$ = state$.pipe(skip(1));\n        }\n\n        const subscriptions = [\n            state$.subscribe(subscriber),\n            this._notification$.subscribe(subscriber),\n        ];\n\n        return () => subscriptions.forEach(subscription => subscription.unsubscribe());\n    }\n\n    private _transformStates(\n        states: StateTuple<TState, TTransformedState>,\n        action: TAction\n    ): StateTuple<TState, TTransformedState> {\n        try {\n            const newState = this._options.shouldWarnMutation === false ?\n                this._reducer(states.state, action) :\n                deepFreeze(this._reducer(states.state, action), {\n                    equalityCheck: this._options.equalityCheck,\n                    previousValue: states.state,\n                });\n            const transformedState = this._options.stateTransformer(newState);\n\n            return { state: newState, transformedState };\n        } catch (error) {\n            this._getDispatchError(action.meta && action.meta.queueId).next(error);\n\n            return { state: states.state, transformedState: states.transformedState };\n        }\n    }\n\n    private _dispatchAction<TDispatchAction extends TAction>(\n        action: TDispatchAction\n    ): Promise<TTransformedState> {\n        return this._dispatchObservableAction(\n            action.error ? throwError(action) : of(action)\n        );\n    }\n\n    private _dispatchObservableAction<TDispatchAction extends TAction>(\n        action$: SubscribableOrPromise<TDispatchAction>,\n        options: DispatchOptions = {}\n    ): Promise<TTransformedState> {\n        return new Promise((resolve, reject) => {\n            const error$ = this._getDispatchError(options.queueId);\n            const transformedAction$ = this._options.actionTransformer(\n                from(action$).pipe(\n                    map(action =>\n                        options.queueId ?\n                            merge({}, action, { meta: { queueId: options.queueId } }) :\n                            action\n                    )\n                ) as Subscribable<TDispatchAction>\n            );\n\n            this._getDispatcher(options.queueId).next(\n                from(transformedAction$)\n                    .pipe(\n                        map((action, index) => {\n                            if (index === 0) {\n                                error$.pipe(first()).subscribe(reject);\n                            }\n\n                            if (action.error) {\n                                reject(action.payload);\n                            }\n\n                            return action;\n                        }),\n                        catchError(action => {\n                            reject(action instanceof Error ? action : action.payload);\n\n                            return of(action);\n                        }),\n                        tap({\n                            complete: () => {\n                                resolve(this.getState());\n                            },\n                        })\n                    )\n            );\n        });\n    }\n\n    private _dispatchThunkAction<TDispatchAction extends TAction>(\n        thunkAction: ThunkAction<TDispatchAction, TTransformedState>,\n        options: DispatchOptions = {}\n    ): Promise<TTransformedState> {\n        return this._dispatchObservableAction(defer(() => thunkAction(this)), options);\n    }\n\n    private _getDispatcher(queueId: string = 'default'): Dispatcher<TAction> {\n        if (!this._dispatchers[queueId]) {\n            this._dispatchers[queueId] = new Subject();\n\n            this._dispatchQueue$.next(this._dispatchers[queueId]);\n        }\n\n        return this._dispatchers[queueId];\n    }\n\n    private _getDispatchError(queueId: string = 'default'): Subject<Error> {\n        if (!this._errors[queueId]) {\n            this._errors[queueId] = new Subject();\n        }\n\n        return this._errors[queueId];\n    }\n}\n\nexport interface DataStoreOptions<TState, TAction, TTransformedState> {\n    shouldWarnMutation: boolean;\n    actionTransformer(action: Subscribable<TAction>): Subscribable<TAction>;\n    equalityCheck(valueA: any, valueB: any): boolean;\n    stateTransformer(state: TState): TTransformedState;\n}\n\ninterface StateTuple<TState, TTransformedState> {\n    state: TState;\n    transformedState: TTransformedState;\n}\n\ntype Dispatcher<TAction> = Subject<Subscribable<TAction>>;\n"]}