{"version":3,"sources":["../../../../src/payment/v1/payment-mappers/payment-mapper.js"],"names":["PaymentMapper","paymentMethodIdMapper","PaymentMethodIdMapper","create","data","order","orderMeta","payment","paymentMethod","payload","device_info","deviceSessionId","device","deviceFingerprint","fingerprint_id","gateway","mapToId","notify_url","callbackUrl","return_url","returnUrl","vault_payment_instrument","instrumentId","shouldSaveInstrument","method","nonce","formattedPayload","bigpay_token","mapToBigPayToken","credit_card_token","token","cryptogramId","credit_card_cryptogram","mapToCryptogram","credit_card","mapToCreditCard","account_name","ccName","month","ccExpiry","number","ccNumber","verification_value","ccCvv","year","customer_code","ccCustomerCode","three_d_secure","threeDSecure","credit_card_number_confirmation","payment_cryptogram","eci","xid","transactionId","account_mask","accountMask"],"mappings":"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","file":"payment-mapper.js","sourcesContent":["import objectAssign from 'object-assign';\nimport PaymentMethodIdMapper from '../../payment-method-mappers/payment-method-id-mapper';\nimport { omitNil, toNumber } from '../../../common/utils';\n\nexport default class PaymentMapper {\n    /**\n     * @param {PaymentMethodIdMapper} paymentMethodIdMapper\n     * @returns {PaymentMapper}\n     */\n    static create() {\n        const paymentMethodIdMapper = PaymentMethodIdMapper.create();\n\n        return new PaymentMapper(paymentMethodIdMapper);\n    }\n\n    /**\n     * @param {PaymentMethodIdMapper} paymentMethodIdMapper\n     * @returns {void}\n     */\n    constructor(paymentMethodIdMapper) {\n        /**\n         * @private\n         * @type {PaymentMethodIdMapper}\n         */\n        this.paymentMethodIdMapper = paymentMethodIdMapper;\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToPayment(data) {\n        const {\n            order = {},\n            orderMeta = {},\n            payment = {},\n            paymentMethod = {},\n        } = data;\n\n        const payload = {\n            device_info: payment.deviceSessionId ? payment.deviceSessionId : null,\n            device: orderMeta.deviceFingerprint ? { fingerprint_id: orderMeta.deviceFingerprint } : null,\n            gateway: this.paymentMethodIdMapper.mapToId(paymentMethod),\n            notify_url: order.callbackUrl,\n            return_url: paymentMethod.returnUrl || (order.payment ? order.payment.returnUrl : null),\n            vault_payment_instrument: !payment.instrumentId ? payment.shouldSaveInstrument : null,\n        };\n\n        const method = paymentMethod.method;\n\n        if (method) {\n            objectAssign(payload, { method });\n        }\n\n        const nonce = payment.nonce || paymentMethod.nonce;\n\n        if (payment.formattedPayload) {\n            objectAssign(payload, payment.formattedPayload);\n        } else if (payment.instrumentId) {\n            objectAssign(payload, {\n                bigpay_token: this.mapToBigPayToken(data),\n            });\n        } else if (nonce) {\n            objectAssign(payload, {\n                credit_card_token: {\n                    token: nonce,\n                },\n            });\n        } else if (payment.cryptogramId) {\n            objectAssign(payload, {\n                credit_card_cryptogram: this.mapToCryptogram(data),\n            });\n        } else {\n            objectAssign(payload, {\n                credit_card: this.mapToCreditCard(data),\n            });\n        }\n\n        return omitNil(payload);\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToCreditCard(data) {\n        const { payment = {} } = data;\n\n        return omitNil({\n            account_name: payment.ccName,\n            month: payment.ccExpiry ? toNumber(payment.ccExpiry.month) : null,\n            number: payment.ccNumber,\n            verification_value: payment.ccCvv,\n            year: payment.ccExpiry ? toNumber(payment.ccExpiry.year) : null,\n            customer_code: payment.ccCustomerCode,\n            three_d_secure: payment.threeDSecure,\n        });\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @return {Object}\n     */\n    mapToBigPayToken({ payment }) {\n        return omitNil({\n            credit_card_number_confirmation: payment.ccNumber,\n            token: payment.instrumentId,\n            verification_value: payment.ccCvv,\n            three_d_secure: payment.threeDSecure,\n        });\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @return {Object}\n     */\n    mapToCryptogram({ payment }) {\n        return omitNil({\n            payment_cryptogram: payment.cryptogramId,\n            eci: payment.eci,\n            xid: payment.transactionId,\n            month: payment.ccExpiry ? toNumber(payment.ccExpiry.month) : null,\n            number: payment.ccNumber,\n            year: payment.ccExpiry ? toNumber(payment.ccExpiry.year) : null,\n            account_mask: payment.accountMask,\n        });\n    }\n}\n"]}