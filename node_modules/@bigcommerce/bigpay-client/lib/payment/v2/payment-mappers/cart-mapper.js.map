{"version":3,"sources":["../../../../src/payment/v2/payment-mappers/cart-mapper.js"],"names":["CartMapper","data","cart","currency_code","currency","items","mapToItems","totals","mapToOrderTotals","map","discount_amount","itemData","integerDiscount","name","price","integerAmount","quantity","sku","tax_amount","integerTax","amount","integerAmountAfterDiscount","type","mapToType","discount_total","discount","grand_total","grandTotal","shipping_total","shipping","subtotal","surcharge_total","handling","tax_total","taxTotal","types","ItemPhysicalEntity","ItemDigitalEntity","ItemGiftCertificateEntity"],"mappings":";;;;;;;;AAAA;;;;IAEqBA,U;;;;;;;;;AAQjB;;;;kCAIUC,I,EAAM;AAAA,6BACUA,IADV,CACJC,IADI;AAAA,gBACJA,IADI,8BACG,EADH;;;AAGZ,mBAAO,oBAAQ;AACXC,+BAAeD,KAAKE,QADT;AAEXC,uBAAO,KAAKC,UAAL,CAAgBL,IAAhB,CAFI;AAGXM,wBAAQ,KAAKC,gBAAL,CAAsBP,IAAtB;AAHG,aAAR,CAAP;AAKH;;AAED;;;;;;;;mCAKWA,I,EAAM;AAAA;;AAAA,8BACoBA,IADpB,CACLC,IADK;AAAA,gBACLA,IADK,+BACE,EAAEG,OAAO,EAAT,EADF;;;AAGb,mBAAOH,KAAKG,KAAL,CAAWI,GAAX,CAAe;AAAA,uBAAY,oBAAQ;AACtCC,qCAAiBC,SAASC,eADY;AAEtCC,0BAAMF,SAASE,IAFuB;AAGtCC,2BAAOH,SAASI,aAHsB;AAItCC,8BAAUL,SAASK,QAJmB;AAKtCC,yBAAKN,SAASM,GALwB;AAMtCC,gCAAYP,SAASQ,UANiB;AAOtCC,4BAAQT,SAASU,0BAPqB;AAQtCC,0BAAM,MAAKC,SAAL,CAAeZ,QAAf;AARgC,iBAAR,CAAZ;AAAA,aAAf,CAAP;AAUH;;AAED;;;;;;;;yCAKiBV,I,EAAM;AAAA,8BACGA,IADH,CACXC,IADW;AAAA,gBACXA,IADW,+BACJ,EADI;;;AAGnB,mBAAO,oBAAQ;AACXsB,gCAAgBtB,KAAKuB,QAAL,GAAgBvB,KAAKuB,QAAL,CAAcV,aAA9B,GAA8C,IADnD;AAEXW,6BAAaxB,KAAKyB,UAAL,GAAkBzB,KAAKyB,UAAL,CAAgBZ,aAAlC,GAAkD,IAFpD;AAGXa,gCAAgB1B,KAAK2B,QAAL,GAAgB3B,KAAK2B,QAAL,CAAcd,aAA9B,GAA8C,IAHnD;AAIXe,0BAAU5B,KAAK4B,QAAL,GAAgB5B,KAAK4B,QAAL,CAAcf,aAA9B,GAA8C,IAJ7C;AAKXgB,iCAAiB7B,KAAK8B,QAAL,GAAgB9B,KAAK8B,QAAL,CAAcjB,aAA9B,GAA8C,IALpD;AAMXkB,2BAAW/B,KAAKgC,QAAL,GAAgBhC,KAAKgC,QAAL,CAAcnB,aAA9B,GAA8C;AAN9C,aAAR,CAAP;AAQH;;AAED;;;;;;;;kCAKUJ,Q,EAAU;AAChB,gBAAMwB,QAAQ;AACVC,oCAAoB,UADV;AAEVC,mCAAmB,SAFT;AAGVC,2CAA2B;AAHjB,aAAd;;AAMA,mBAAOH,MAAMxB,SAASW,IAAf,CAAP;AACH;;;;AAxED;;;iCAGgB;AACZ,mBAAO,IAAItB,UAAJ,EAAP;AACH;;;;;;kBANgBA,U","file":"cart-mapper.js","sourcesContent":["import { omitNil } from '../../../common/utils';\n\nexport default class CartMapper {\n    /**\n     * @returns {CartMapper}\n     */\n    static create() {\n        return new CartMapper();\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToCart(data) {\n        const { cart = {} } = data;\n\n        return omitNil({\n            currency_code: cart.currency,\n            items: this.mapToItems(data),\n            totals: this.mapToOrderTotals(data),\n        });\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @returns {Object[]}\n     */\n    mapToItems(data) {\n        const { cart = { items: [] } } = data;\n\n        return cart.items.map(itemData => omitNil({\n            discount_amount: itemData.integerDiscount,\n            name: itemData.name,\n            price: itemData.integerAmount,\n            quantity: itemData.quantity,\n            sku: itemData.sku,\n            tax_amount: itemData.integerTax,\n            amount: itemData.integerAmountAfterDiscount,\n            type: this.mapToType(itemData),\n        }));\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToOrderTotals(data) {\n        const { cart = {} } = data;\n\n        return omitNil({\n            discount_total: cart.discount ? cart.discount.integerAmount : null,\n            grand_total: cart.grandTotal ? cart.grandTotal.integerAmount : null,\n            shipping_total: cart.shipping ? cart.shipping.integerAmount : null,\n            subtotal: cart.subtotal ? cart.subtotal.integerAmount : null,\n            surcharge_total: cart.handling ? cart.handling.integerAmount : null,\n            tax_total: cart.taxTotal ? cart.taxTotal.integerAmount : null,\n        });\n    }\n\n    /**\n     * @private\n     * @param {Object} itemData\n     * @returns {Object}\n     */\n    mapToType(itemData) {\n        const types = {\n            ItemPhysicalEntity: 'physical',\n            ItemDigitalEntity: 'digital',\n            ItemGiftCertificateEntity: 'gift_card',\n        };\n\n        return types[itemData.type];\n    }\n}\n"]}