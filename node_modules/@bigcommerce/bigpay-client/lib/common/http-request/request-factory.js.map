{"version":3,"sources":["../../../src/common/http-request/request-factory.js"],"names":["RequestFactory","url","options","callback","xhr","XMLHttpRequest","onerror","Error","statusText","onload","open","method","setOptions","headers","headerKeys","Object","keys","forEach","key","value","setRequestHeader","withCredentials","setHeaders"],"mappings":";;;;;;;;;;IAAqBA,c;;;;;;;;;AAQjB;;;;;;sCAMcC,G,EAAKC,O,EAASC,Q,EAAU;AAClC,gBAAMC,MAAM,IAAIC,cAAJ,EAAZ;;AAEAD,gBAAIE,OAAJ,GAAc,YAAM;AAChB,oBAAIH,QAAJ,EAAc;AACVA,6BAAS,IAAII,KAAJ,CAAUH,IAAII,UAAd,CAAT;AACH;AACJ,aAJD;;AAMAJ,gBAAIK,MAAJ,GAAa,YAAM;AACf,oBAAIN,QAAJ,EAAc;AACVA;AACH;AACJ,aAJD;;AAMAC,gBAAIM,IAAJ,CAASR,QAAQS,MAAjB,EAAyBV,GAAzB,EAA8B,IAA9B;AACA,iBAAKW,UAAL,CAAgBR,GAAhB,EAAqBF,OAArB;;AAEA,mBAAOE,GAAP;AACH;;AAED;;;;;;;;;mCAMWA,G,EAAKS,O,EAAS;AACrB,gBAAMC,aAAaC,OAAOC,IAAP,CAAYH,OAAZ,CAAnB;;AAEAC,uBAAWG,OAAX,CAAmB,UAACC,GAAD,EAAS;AACxB,oBAAMC,QAAQN,QAAQK,GAAR,CAAd;;AAEAd,oBAAIgB,gBAAJ,CAAqBF,GAArB,EAA0BC,KAA1B;AACH,aAJD;AAKH;;AAED;;;;;;;;;mCAMWf,G,EAAKF,O,EAAS;AACrBE,gBAAIiB,eAAJ,GAAsBnB,QAAQmB,eAA9B;;AAEA,gBAAInB,QAAQW,OAAZ,EAAqB;AACjB,qBAAKS,UAAL,CAAgBlB,GAAhB,EAAqBF,QAAQW,OAA7B;AACH;AACJ;;;;AA9DD;;;iCAGgB;AACZ,mBAAO,IAAIb,cAAJ,EAAP;AACH;;;;;;kBANgBA,c","file":"request-factory.js","sourcesContent":["export default class RequestFactory {\n    /**\n     * @returns {RequestFactory}\n     */\n    static create() {\n        return new RequestFactory();\n    }\n\n    /**\n     * @param {string} url\n     * @param {Object} options\n     * @param {Function} [callback]\n     * @returns {XMLHttpRequest}\n     */\n    createRequest(url, options, callback) {\n        const xhr = new XMLHttpRequest();\n\n        xhr.onerror = () => {\n            if (callback) {\n                callback(new Error(xhr.statusText));\n            }\n        };\n\n        xhr.onload = () => {\n            if (callback) {\n                callback();\n            }\n        };\n\n        xhr.open(options.method, url, true);\n        this.setOptions(xhr, options);\n\n        return xhr;\n    }\n\n    /**\n     * @private\n     * @param {XMLHttpRequest} xhr\n     * @param {Object} headers\n     * @returns {void}\n     */\n    setHeaders(xhr, headers) {\n        const headerKeys = Object.keys(headers);\n\n        headerKeys.forEach((key) => {\n            const value = headers[key];\n\n            xhr.setRequestHeader(key, value);\n        });\n    }\n\n    /**\n     * @private\n     * @param {XMLHttpRequest} xhr\n     * @param {Object} options\n     * @returns {void}\n     */\n    setOptions(xhr, options) {\n        xhr.withCredentials = options.withCredentials;\n\n        if (options.headers) {\n            this.setHeaders(xhr, options.headers);\n        }\n    }\n}\n"]}