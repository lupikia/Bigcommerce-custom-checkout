{"version":3,"sources":["../../../src/common/http-request/payload-transformer.js"],"names":["PayloadTransformer","data","contentType","APPLICATION_JSON","JSON","stringify","xhr","headers","parseResponseHeaders","getAllResponseHeaders","getResponseHeader","status","statusText","response","responseText","parse","rawHeaders","lines","replace","split","reduce","line","parts","key","shift","trim","toLowerCase","join"],"mappings":";;;;;;;;AAAA;;;;AACA;;AACA;;;;;;;;IAEqBA,kB;;;;;;;;;AAQjB;;;;;kCAKUC,I,EAAsC;AAAA,gBAAhCC,WAAgC,uEAAlBC,8BAAkB;;AAC5C,gBAAIF,QAAQ,qBAASC,WAAT,EAAsBC,8BAAtB,CAAZ,EAAqD;AACjD,uBAAOC,KAAKC,SAAL,CAAeJ,IAAf,CAAP;AACH;;AAED,mBAAOA,IAAP;AACH;;AAED;;;;;;;;;;qCAOaK,G,EAAK;AACd,gBAAMC,UAAU,KAAKC,oBAAL,CAA0BF,IAAIG,qBAAJ,EAA1B,CAAhB;AACA,gBAAMP,cAAcI,IAAII,iBAAJ,CAAsB,cAAtB,CAApB;AAFc,gBAGNC,MAHM,GAGiBL,GAHjB,CAGNK,MAHM;AAAA,gBAGEC,UAHF,GAGiBN,GAHjB,CAGEM,UAHF;;;AAKd,gBAAIX,OAAO,cAAcK,GAAd,GAAoBA,IAAIO,QAAxB,GAAmCP,IAAIQ,YAAlD;;AAEA,gBAAIb,QAAQ,qBAASC,WAAT,EAAsBC,8BAAtB,CAAZ,EAAqD;AACjDF,uBAAOG,KAAKW,KAAL,CAAWd,IAAX,CAAP;AACH;;AAED,mBAAO,EAAEA,UAAF,EAAQM,gBAAR,EAAiBI,cAAjB,EAAyBC,sBAAzB,EAAP;AACH;;AAED;;;;;;;;6CAKqBI,U,EAAY;AAC7B,gBAAMC,QAAQD,aAAaA,WAAWE,OAAX,CAAmB,cAAnB,EAAmC,GAAnC,EAAwCC,KAAxC,CAA8C,OAA9C,CAAb,GAAsE,EAApF;;AAEA,mBAAOF,MAAMG,MAAN,CAAa,UAACb,OAAD,EAAUc,IAAV,EAAmB;AACnC,oBAAMC,QAAQD,KAAKF,KAAL,CAAW,GAAX,CAAd;AACA,oBAAMI,MAAM,CAACD,MAAME,KAAN,MAAiB,EAAlB,EAAsBC,IAAtB,EAAZ;;AAEA,oBAAI,CAACF,GAAL,EAAU;AACN,2BAAOhB,OAAP;AACH;;AAED,uBAAO,4BAAa,EAAb,EAAiBA,OAAjB,sBACFgB,IAAIG,WAAJ,EADE,EACkBJ,MAAMK,IAAN,CAAW,GAAX,EAAgBF,IAAhB,EADlB,EAAP;AAGH,aAXM,EAWJ,EAXI,CAAP;AAYH;;;;AA7DD;;;iCAGgB;AACZ,mBAAO,IAAIzB,kBAAJ,EAAP;AACH;;;;;;kBANgBA,kB","file":"payload-transformer.js","sourcesContent":["import objectAssign from 'object-assign';\nimport { APPLICATION_JSON } from './content-types';\nimport { includes } from '../utils';\n\nexport default class PayloadTransformer {\n    /**\n     * @returns {PayloadTransformer}\n     */\n    static create() {\n        return new PayloadTransformer();\n    }\n\n    /**\n     * @param {Object} data\n     * @param {string} [contentType = APPLICATION_JSON]\n     * @returns {Object}\n     */\n    toRequest(data, contentType = APPLICATION_JSON) {\n        if (data && includes(contentType, APPLICATION_JSON)) {\n            return JSON.stringify(data);\n        }\n\n        return data;\n    }\n\n    /**\n     * @param {XMLHttpRequest} xhr\n     * @returns {Object}\n     * @property {Object} data\n     * @property {number} status\n     * @property {string} statusText\n     */\n    fromResponse(xhr) {\n        const headers = this.parseResponseHeaders(xhr.getAllResponseHeaders());\n        const contentType = xhr.getResponseHeader('Content-Type');\n        const { status, statusText } = xhr;\n\n        let data = 'response' in xhr ? xhr.response : xhr.responseText;\n\n        if (data && includes(contentType, APPLICATION_JSON)) {\n            data = JSON.parse(data);\n        }\n\n        return { data, headers, status, statusText };\n    }\n\n    /**\n     * @private\n     * @param {string} rawHeaders\n     * @returns {Object}\n     */\n    parseResponseHeaders(rawHeaders) {\n        const lines = rawHeaders ? rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ').split(/\\r?\\n/) : [];\n\n        return lines.reduce((headers, line) => {\n            const parts = line.split(':');\n            const key = (parts.shift() || '').trim();\n\n            if (!key) {\n                return headers;\n            }\n\n            return objectAssign({}, headers, {\n                [key.toLowerCase()]: parts.join(':').trim(),\n            });\n        }, {});\n    }\n}\n"]}