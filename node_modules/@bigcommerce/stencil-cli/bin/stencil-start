#!/usr/bin/env node

var _ = require('lodash');
var Bs = require('browser-sync').create();
var Cycles = require('../lib/cycles');
var recursiveRead = require('recursive-readdir');
var Async = require('async');
var templateAssembler = require('../lib/template-assembler');
var Fs = require('fs');
var JspmAssembler = require('../lib/jspm-assembler');
var Path = require('path');
var Pkg = require('../package.json');
var Program = require('commander');
var Server = require('../server');
var ThemeConfig = require('../lib/theme-config');
var buildConfig = require('../lib/build-config');
var Url = require('url');
var Wreck = require('wreck');
var jsonLint = require('../lib/json-lint');
var versionCheck = require('../lib/version-check');
var themePath = process.cwd();
var browserSyncPort;
var templatePath = Path.join(themePath, 'templates');
var dotStencilFilePath = Path.join(themePath, '.stencil');
var themeConfigPath = Path.join(themePath, 'config.json');
var dotStencilFile;
var stencilServerPort;
var themeConfig;
var configuration;
var staplerUrl;
var headers;
require('colors');

Program
    .version(Pkg.version)
    .option('-o, --open', 'Automatically open default browser')
    .option('-v, --variation [name]', 'Set which theme variation to use while developing')
    .option('-t, --test', 'Enable QA mode which will bundle all javascript for speed to test locally')
    .option('--tunnel', 'Create a tunnel URL which points to your local server that anyone can use.')
    .option('-e, --theme-editor', 'Run Theme Editor server')
    .option('-n, --no-cache', 'Turns off caching for API resource data per storefront page. The cache lasts for 5 minutes before automatically refreshing.')
    .option('--theme-editor-port [port]', 'Run the Theme Editor on a different port')
    .parse(process.argv);


if (!versionCheck()) {
    return;
}

if (!fileExist(dotStencilFilePath)) {
    return console.error('Error: Please run'.red + ' $ stencil init'.cyan + ' first.'.red);
}

if (!fileExist(Path.join(themePath, 'config.json'))) {
    return console.error('Error: You must have a '.red + 'config.json'.cyan + ' file in your top level theme directory.');
}

// If the value is true it means that no variation was passed in.
if (Program.variation === true) {
    return console.error('Error: You have to specify a value for -v or --variation'.red);
}

// Instantiate themeConfig
themeConfig = ThemeConfig.getInstance(themePath);

if (Program.variation) {
    try {
        themeConfig.setVariationByName(Program.variation);
    } catch (err) {
        return console.error('Error: The variation '.red + Program.variation + ' does not exists in your config.json file'.red);
    }
}

configuration = themeConfig.getConfig();

dotStencilFile = Fs.readFileSync(dotStencilFilePath, {encoding: 'utf-8'});

try {
    dotStencilFile = jsonLint.parse(dotStencilFile, dotStencilFilePath);
} catch (e) {
    return console.error(e.stack);
}

browserSyncPort = dotStencilFile.port;
stencilServerPort = ++dotStencilFile.port;

if (!(dotStencilFile.normalStoreUrl) || !(dotStencilFile.customLayouts)) {
    return console.error(
        'Error: Your stencil config is outdated. Please run'.red +
        ' $ stencil init'.cyan + ' again.'.red
    );
}

headers = {
    'stencil-cli': Pkg.version
};

if (dotStencilFile.staplerUrl) {
    staplerUrl = dotStencilFile.staplerUrl;
    headers['stencil-store-url'] = dotStencilFile.normalStoreUrl;
} else {
    staplerUrl = dotStencilFile.normalStoreUrl;
}

Wreck.get(
    Url.resolve(staplerUrl, '/stencil-version-check?v=' + Pkg.version),
    {
        headers: headers,
        json: true,
        rejectUnauthorized: false,
    },
    function (err, res, payload) {
        var bundleTask;

        if (err || !payload) {
            console.error(
                'The BigCommerce Store you are pointing to either does not exist or is not available at this time.'.red
            );
        } else if (payload.error) {
            return console.error(payload.error.red);
        } else if (payload.status !== 'ok') {
            console.error(
                'Error: You are using an outdated version of stencil-cli, please run '.red +
                '$ npm install -g @bigcommerce/stencil-cli'.cyan
            );
        } else {
            dotStencilFile.storeUrl = payload.sslUrl;
            dotStencilFile.normalStoreUrl = payload.baseUrl;
            dotStencilFile.stencilServerPort = stencilServerPort;

            if (configuration.jspm && Program.test) {
                bundleTask = JspmAssembler.assemble(
                    {
                        bootstrap: configuration.jspm.bootstrap
                    },
                    themePath
                );

                bundleTask(function (result) {
                    return startServer();
                });
            } else {
                return startServer();
            }
        }
    }
);

/**
 * Starts up the local Stencil Server as well as starts up BrowserSync and sets some watch options.
 */
function startServer() {
    var params = {
        dotStencilFile: dotStencilFile,
        variationIndex: themeConfig.variationIndex || 0,
        stencilEditorEnabled: Program.themeEditor,
        stencilEditorPort: Program.themeEditorPort || 8181,
        useCache: Program.cache,
        themePath: themePath,
    };

    Server(params, function (err) {
        var watchFiles = [
            '/assets',
            '/templates',
            '/lang'
        ];
        var watchIgnored = [
            '/assets/scss',
            '/assets/less',
            '/assets/css',
            '/assets/jspm_packages'
        ];

        if (err) {
            throw err;
        }

        // Display Set up information
        console.log(startUpInformation());

        // Watch sccs directory and automatically reload all css files if a file changes
        Bs.watch(Path.join(themePath, 'assets/scss'), event => {
            if (event === 'change') {
                Bs.reload(`stencil/*.css`);
            }
        });

        Bs.watch('config.json', (event) => {
            if (event === 'change') {
                try {
                    configuration = themeConfig.getConfig();
                } catch (e) {
                    return console.error(e);
                }

                Bs.reload();
            }
        });

        Bs.watch(templatePath, {ignoreInitial: true}, () => {
            assembleTemplates(templatePath, (err, results) => {
                if (err) {
                    return console.error(err);
                }

                try {
                    new Cycles(results).detect();
                } catch (e) {
                    console.error(e);
                }
            })
        });

        if (buildConfig.watchOptions && buildConfig.watchOptions.files) {
            watchFiles = buildConfig.watchOptions.files;
        }

        if (buildConfig.watchOptions && buildConfig.watchOptions.ignored) {
            watchIgnored = buildConfig.watchOptions.ignored;
        }

        Bs.init({
            open: !!Program.open,
            port: browserSyncPort,
            files: watchFiles.map(val => Path.join(themePath, val)),
            watchOptions: {
                ignoreInitial: true,
                ignored: watchIgnored.map(val => Path.join(themePath, val)),
            },
            proxy: "localhost:" + stencilServerPort,
            tunnel: !!Program.tunnel,
        });

        // Handle manual reloading of browsers by typing 'rs';
        // Borrowed from https://github.com/remy/nodemon
        process.stdin.resume();
        process.stdin.setEncoding('utf8');
        process.stdin.on('data', data => {
            data = (data + '').trim().toLowerCase();

            // if the keys entered match the restartable value, then restart!
            if (data === 'rs') {
                Bs.reload();
            }
        });
    });

    if (buildConfig.development) {
        buildConfig.initWorker().development(Bs);
    }
}

/**
 * Convenience function to parse Theme Config and set some default values if they aren't present
 *
 * @return object
 */
function parseThemeConfig() {
    var ret = {},
        themeConfig;

    themeConfig = ThemeConfig.getInstance(themePath, Program.variation);

    try {
        ret.config = themeConfig.getConfig();
    } catch (e) {
        return console.error(e);
    }

    return ret;
}

/**
 * Assembles all the needed templates and resolves their partials.
 * @param {string} templatePath
 * @param {function} callback
 */
function assembleTemplates(templatePath, callback) {
    recursiveRead(templatePath, ['!*.html'], function (err, files) {
        files = files.map(function (file) {
            return file.replace(templatePath + Path.sep, '').replace('.html', '');
        });

        Async.map(files, templateAssembler.assemble.bind(null, templatePath), function (err, results) {
            if (err) {
                callback(err);
            }
            callback(null, results);
        })
    });
}

/**
 * Check if file exist synchronous
 * @param  {string} path
 * @return {boolean}
 */
function fileExist(path) {
    try {
        return !!Fs.statSync(path);
    }
    catch (e) {
        return false;
    }
}

/**
 * Displays information about your environment and configuration.
 * @return {string}
 */
function startUpInformation() {
    var information = '\n';

    information += '-----------------Startup Information-------------\n'.gray;
    information += '\n';
    information += '.stencil location: ' + dotStencilFilePath.cyan + '\n';
    information += 'config.json location: ' + themeConfigPath.cyan + '\n';
    information += 'Store URL: ' + dotStencilFile.normalStoreUrl.cyan + '\n';

    if (dotStencilFile.staplerUrl) {
        information += 'Stapler URL: ' + staplerUrl.cyan + '\n';
    }

    information += 'SSL Store URL: ' + dotStencilFile.storeUrl.cyan + '\n';
    information += 'Node Version: ' + process.version.cyan + '\n';
    information += '\n';
    information += '-------------------------------------------------\n'.gray;

    return information;
}
