{"version":3,"file":"request-sender.js","sourceRoot":"","sources":["../src/request-sender.ts"],"names":[],"mappings":"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","sourcesContent":["import { CookiesStatic } from 'js-cookie';\nimport merge from 'lodash/merge';\n\nimport isPromise from './is-promise';\nimport PayloadTransformer from './payload-transformer';\nimport RequestFactory from './request-factory';\nimport RequestOptions from './request-options';\nimport RequestSenderOptions from './request-sender-options';\nimport Response from './response';\nimport Timeout from './timeout';\n\nexport default class RequestSender {\n    constructor(\n        private _requestFactory: RequestFactory,\n        private _payloadTransformer: PayloadTransformer,\n        private _cookie: CookiesStatic,\n        private _options?: RequestSenderOptions\n    ) {}\n\n    sendRequest<T = any>(url: string, options?: RequestOptions): Promise<Response<T>> {\n        const requestOptions = this._mergeDefaultOptions(options);\n        const request = this._requestFactory.createRequest(this._prependHost(url), requestOptions);\n\n        return new Promise((resolve, reject) => {\n            const requestHandler = () => {\n                const response = this._payloadTransformer.toResponse(request);\n\n                if (response.status >= 200 && response.status < 300) {\n                    resolve(response);\n                } else {\n                    reject(response);\n                }\n            };\n\n            request.onload = requestHandler;\n            request.onerror = requestHandler;\n            request.onabort = requestHandler;\n            request.ontimeout = requestHandler;\n\n            if (requestOptions.timeout instanceof Timeout) {\n                requestOptions.timeout.onComplete(() => request.abort());\n                requestOptions.timeout.start();\n            }\n\n            if (isPromise(requestOptions.timeout)) {\n                requestOptions.timeout.then(() => request.abort());\n            }\n\n            request.send(this._payloadTransformer.toRequestBody(requestOptions));\n        });\n    }\n\n    get<T = any>(url: string, options?: RequestOptions): Promise<Response<T>> {\n        return this.sendRequest(url, { ...options, method: 'GET' });\n    }\n\n    post<T = any>(url: string, options?: RequestOptions): Promise<Response<T>> {\n        return this.sendRequest(url, { ...options, method: 'POST' });\n    }\n\n    put<T = any>(url: string, options?: RequestOptions): Promise<Response<T>> {\n        return this.sendRequest(url, { ...options, method: 'PUT' });\n    }\n\n    patch<T = any>(url: string, options?: RequestOptions): Promise<Response<T>> {\n        return this.sendRequest(url, { ...options, method: 'PATCH' });\n    }\n\n    delete<T = any>(url: string, options?: RequestOptions): Promise<Response<T>> {\n        return this.sendRequest(url, { ...options, method: 'DELETE' });\n    }\n\n    private _mergeDefaultOptions(options?: RequestOptions): RequestOptions {\n        const defaultOptions: Partial<RequestOptions> = {\n            credentials: true,\n            headers: {\n                Accept: 'application/json, text/plain, */*',\n            },\n            method: 'GET',\n        };\n\n        const csrfToken = this._cookie.get('XSRF-TOKEN');\n\n        if (csrfToken && defaultOptions.headers) {\n            defaultOptions.headers['X-XSRF-TOKEN'] = csrfToken;\n        }\n\n        if (options && options.body && defaultOptions.headers) {\n            defaultOptions.headers['Content-Type'] = 'application/json';\n        }\n\n        return merge({}, defaultOptions, options);\n    }\n\n    private _prependHost(url: string): string {\n        if (!this._options || !this._options.host || /^https?:\\/\\//.test(url)) {\n            return url;\n        }\n\n        return `${this._options.host.replace(/\\/$/, '')}/${url.replace(/^\\//, '')}`;\n    }\n}\n"]}