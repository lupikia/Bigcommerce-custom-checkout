{"version":3,"file":"request-factory.js","sourceRoot":"","sources":["../src/request-factory.ts"],"names":[],"mappings":";;;AAAA,gEAA4C;AAK5C;IAAA;IAsCA,CAAC;IArCG,sCAAa,GAAb,UAAc,GAAW,EAAE,OAAwB;QAC/C,IAAM,GAAG,GAAG,IAAI,cAAc,EAAE,CAAC;QAEjC,IAAI,CAAC,iBAAiB,CAAC,GAAG,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;QAE1C,OAAO,GAAG,CAAC;IACf,CAAC;IAEO,0CAAiB,GAAzB,UAA0B,GAAmB,EAAE,GAAW,EAAE,OAA4B;QAA5B,wBAAA,EAAA,YAA4B;QACpF,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,KAAK,EAAE,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,OAAO,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,CAAC;QAE9E,IAAI,OAAO,CAAC,OAAO,EAAE;YACjB,IAAI,CAAC,wBAAwB,CAAC,GAAG,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC;SACvD;QAED,IAAI,OAAO,OAAO,CAAC,WAAW,KAAK,SAAS,EAAE;YAC1C,GAAG,CAAC,eAAe,GAAG,OAAO,CAAC,WAAW,CAAC;SAC7C;QAED,IAAI,OAAO,OAAO,CAAC,OAAO,KAAK,QAAQ,EAAE;YACrC,GAAG,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;SACjC;IACL,CAAC;IAEO,iDAAwB,GAAhC,UAAiC,GAAmB,EAAE,OAAgB;QAClE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,UAAA,GAAG;YAC5B,GAAG,CAAC,gBAAgB,CAAC,GAAG,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;IACP,CAAC;IAEO,mCAAU,GAAlB,UAAmB,GAAW,EAAE,MAAe;QAC3C,IAAI,CAAC,MAAM,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE;YAC7C,OAAO,GAAG,CAAC;SACd;QAED,OAAU,GAAG,SAAI,WAAW,CAAC,SAAS,CAAC,MAAM,CAAG,CAAC;IACrD,CAAC;IACL,qBAAC;AAAD,CAAC,AAtCD,IAsCC","sourcesContent":["import * as queryString from 'query-string';\n\nimport Headers from './headers';\nimport RequestOptions from './request-options';\n\nexport default class RequestFactory {\n    createRequest(url: string, options?: RequestOptions): XMLHttpRequest {\n        const xhr = new XMLHttpRequest();\n\n        this._configureRequest(xhr, url, options);\n\n        return xhr;\n    }\n\n    private _configureRequest(xhr: XMLHttpRequest, url: string, options: RequestOptions = {}): void {\n        xhr.open(options.method || 'GET', this._formatUrl(url, options.params), true);\n\n        if (options.headers) {\n            this._configureRequestHeaders(xhr, options.headers);\n        }\n\n        if (typeof options.credentials === 'boolean') {\n            xhr.withCredentials = options.credentials;\n        }\n\n        if (typeof options.timeout === 'number') {\n            xhr.timeout = options.timeout;\n        }\n    }\n\n    private _configureRequestHeaders(xhr: XMLHttpRequest, headers: Headers): void {\n        Object.keys(headers).forEach(key => {\n            xhr.setRequestHeader(key, headers[key]);\n        });\n    }\n\n    private _formatUrl(url: string, params?: object): string {\n        if (!params || Object.keys(params).length === 0) {\n            return url;\n        }\n\n        return `${url}?${queryString.stringify(params)}`;\n    }\n}\n"]}