{"version":3,"file":"cache-key-resolver.spec.js","sourceRoot":"","sources":["../src/cache-key-resolver.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import CacheKeyResolver from './cache-key-resolver';\n\ndescribe('CacheKeyResolver', () => {\n    it('returns same cache key if params are equal', () => {\n        const resolver = new CacheKeyResolver();\n\n        expect(resolver.getKey('hello')).toEqual('1');\n        expect(resolver.getKey('bye')).toEqual('2');\n        expect(resolver.getKey('hello')).toEqual('1');\n        expect(resolver.getKey('bye')).toEqual('2');\n    });\n\n    it('returns same cache key if multiple params are equal', () => {\n        const resolver = new CacheKeyResolver();\n\n        expect(resolver.getKey('hello', 'world')).toEqual('1');\n        expect(resolver.getKey('hello', 'good', 'bye')).toEqual('2');\n        expect(resolver.getKey('hello', 'world')).toEqual('1');\n        expect(resolver.getKey('hello', 'good', 'bye')).toEqual('2');\n    });\n\n    it('returns same cache key if no params are provided', () => {\n        const resolver = new CacheKeyResolver();\n\n        expect(resolver.getKey()).toEqual('1');\n        expect(resolver.getKey()).toEqual('1');\n    });\n\n    it('works with non-primitive params', () => {\n        const resolver = new CacheKeyResolver();\n        const personA = { name: 'Foo' };\n        const personB = { name: 'Bar' };\n        const personC = { name: 'Foobar' };\n\n        expect(resolver.getKey(personA, personB)).toEqual('1');\n        expect(resolver.getKey(personB, personA)).toEqual('2');\n        expect(resolver.getKey(personA, personB)).toEqual('1');\n        expect(resolver.getKey(personB, personA, personC)).toEqual('3');\n    });\n\n    it('works with functions', () => {\n        const resolver = new CacheKeyResolver();\n        const functionA = () => 'a';\n        const functionB = () => 'b';\n\n        expect(resolver.getKey('foobar', functionA)).toEqual('1');\n        expect(resolver.getKey('foobar', functionB)).toEqual('2');\n        expect(resolver.getKey('foobar', functionA)).toEqual('1');\n        expect(resolver.getKey('foobar', functionB)).toEqual('2');\n    });\n\n    it('works with unserializable objects with cyclical reference', () => {\n        const resolver = new CacheKeyResolver();\n        const objectB: any = { child: undefined };\n        const objectA: any = { child: objectB };\n\n        objectB.child = objectA;\n\n        expect(resolver.getKey(objectA, objectB)).toEqual('1');\n        expect(resolver.getKey(objectA, objectB)).toEqual('1');\n    });\n\n    it('returns same key if objects are shallowly equivalent', () => {\n        const resolver = new CacheKeyResolver();\n        const objectA = { id: 1 };\n        const objectB = { id: 1 };\n\n        expect(resolver.getKey('foobar', objectA)).toEqual(resolver.getKey('foobar', objectB));\n    });\n\n    it('returns different cache key for least recently used set of arguments', () => {\n        const resolver = new CacheKeyResolver({ maxSize: 2 });\n\n        expect(resolver.getKey('hello', 'world')).toEqual('1');\n        // This will return the cache key\n        expect(resolver.getKey('hello', 'world')).toEqual('1');\n        expect(resolver.getKey('hello', 'good')).toEqual('2');\n        expect(resolver.getKey('bad', 'guys')).toEqual('3');\n        // This will return a new cache key because the set of arguments is\n        // least recently used and the number of cache keys already exceed the\n        // maximum size\n        expect(resolver.getKey('hello', 'world')).toEqual('4');\n    });\n\n    it('only expires cache key if number of unique calls exceeds limit', () => {\n        const resolver = new CacheKeyResolver({ maxSize: 2 });\n\n        expect(resolver.getKey('hello', 'world')).toEqual('1');\n        expect(resolver.getKey('hello', 'world')).toEqual('1');\n        // The previous call should not expire the key because it is called with\n        // the same set of arguments\n        expect(resolver.getKey('hello', 'world')).toEqual('1');\n\n        expect(resolver.getKey('foo', 'bar')).toEqual('2');\n        expect(resolver.getKey('hello', 'bye')).toEqual('3');\n\n        // This call should return a new key because the previous two calls are\n        // made with different sets of arguments\n        expect(resolver.getKey('hello', 'world')).toEqual('4');\n    });\n\n    it('returns cache key used count', () => {\n        const resolver = new CacheKeyResolver();\n\n        expect(resolver.getUsedCount('hello', 'world')).toEqual(0);\n        resolver.getKey('hello', 'world');\n        expect(resolver.getUsedCount('hello', 'world')).toEqual(1);\n        resolver.getKey('hello', 'world');\n        expect(resolver.getUsedCount('hello', 'world')).toEqual(2);\n    });\n});\n"]}