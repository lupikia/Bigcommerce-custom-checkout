{"version":3,"file":"memoize.spec.js","sourceRoot":"","sources":["../src/memoize.spec.ts"],"names":[],"mappings":";;;AAAA,8DAAgC;AAEhC,QAAQ,CAAC,SAAS,EAAE;IAChB,EAAE,CAAC,uDAAuD,EAAE;QACxD,IAAM,GAAG,GAAG,IAAI,CAAC,EAAE,CAAC,UAAC,CAAS,EAAE,CAAS,IAAK,OAAA,CAAC,CAAC,GAAG,CAAC,CAAC,EAAP,CAAO,CAAC,CAAC;QACvD,IAAM,WAAW,GAAG,iBAAO,CAAC,GAAG,CAAC,CAAC;QAEjC,WAAW,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAClB,WAAW,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAElB,MAAM,CAAC,GAAG,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;QAErC,WAAW,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAElB,MAAM,CAAC,GAAG,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;IACzC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wCAAwC,EAAE;QACzC,IAAM,GAAG,GAAG,IAAI,CAAC,EAAE,CAAC,UAAC,CAAS,EAAE,CAAS,IAAK,OAAA,CAAC,CAAC,GAAG,CAAC,CAAC,EAAP,CAAO,CAAC,CAAC;QACvD,IAAM,WAAW,GAAG,iBAAO,CAAC,GAAG,EAAE,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC;QACjD,IAAM,KAAK,GAAG,WAAW,CAAC,KAA4B,CAAC;QAEvD,WAAW,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAElB,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC;aAC9B,OAAO,CAAC,CAAC,CAAC,CAAC;QAChB,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,MAAM,CAAC;aACpC,OAAO,CAAC,CAAC,CAAC,CAAC;QAEhB,6DAA6D;QAC7D,WAAW,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAElB,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC;aAC9B,OAAO,CAAC,CAAC,CAAC,CAAC;QAChB,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,MAAM,CAAC;aACpC,OAAO,CAAC,CAAC,CAAC,CAAC;IACpB,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["import memoize from './memoize';\n\ndescribe('memoize', () => {\n    it('only calls function again if parameters are different', () => {\n        const add = jest.fn((a: number, b: number) => (a + b));\n        const memoizedAdd = memoize(add);\n\n        memoizedAdd(1, 1);\n        memoizedAdd(1, 1);\n\n        expect(add).toHaveBeenCalledTimes(1);\n\n        memoizedAdd(2, 2);\n\n        expect(add).toHaveBeenCalledTimes(2);\n    });\n\n    it('deletes cached result when key expires', () => {\n        const add = jest.fn((a: number, b: number) => (a + b));\n        const memoizedAdd = memoize(add, { maxSize: 1 });\n        const cache = memoizedAdd.cache as Map<string, number>;\n\n        memoizedAdd(1, 1);\n\n        expect(cache.values().next().value)\n            .toEqual(2);\n        expect(Array.from(cache.values()).length)\n            .toEqual(1);\n\n        // This call should remove the previous result from the cache\n        memoizedAdd(2, 2);\n\n        expect(cache.values().next().value)\n            .toEqual(4);\n        expect(Array.from(cache.values()).length)\n            .toEqual(1);\n    });\n});\n"]}