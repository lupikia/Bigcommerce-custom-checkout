{"version":3,"file":"memoize.js","sourceRoot":"","sources":["../src/memoize.ts"],"names":[],"mappings":";;;AAAA,0EAA2C,CAAC,gDAAgD;AAC5F,sEAAwC;AAExC,oFAAoD;AAQpD,SAAwB,OAAO,CAC3B,EAAK,EACL,OAAwB;IAElB,IAAA,+EAAwE,EAAtE,oBAAO,EAAE,oBAA6D,CAAC;IAC/E,IAAM,KAAK,GAAG,IAAI,GAAG,EAAE,CAAC;IACxB,IAAM,QAAQ,GAAG,IAAI,4BAAgB,CAAC;QAClC,OAAO,SAAA;QACP,OAAO,SAAA;QACP,QAAQ,EAAE,UAAA,GAAG,IAAI,OAAA,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,EAAjB,CAAiB;KACrC,CAAC,CAAC;IACH,IAAM,QAAQ,GAAG,wBAAa,CAAC,EAAE,EAAE;QAAC,cAAO;aAAP,UAAO,EAAP,qBAAO,EAAP,IAAO;YAAP,yBAAO;;QAAK,OAAA,QAAQ,CAAC,MAAM,OAAf,QAAQ,EAAW,IAAI;IAAvB,CAAwB,CAAC,CAAC;IAE1E,QAAQ,CAAC,KAAK,GAAG,KAAK,CAAC;IAEvB,OAAO,QAAQ,CAAC;AACpB,CAAC;AAhBD,0BAgBC;AAED,SAAgB,UAAU,CACtB,EAAK,EACL,OAAyC;IAEzC,OAAO,OAAO,CAAC,EAAE,uBAAO,OAAO,IAAE,OAAO,EAAE,CAAC,IAAG,CAAC;AACnD,CAAC;AALD,gCAKC","sourcesContent":["import lodashMemoize from 'lodash.memoize'; // tslint:disable-line:match-default-export-name\nimport shallowEqual from 'shallowequal';\n\nimport CacheKeyResolver from './cache-key-resolver';\nimport { Omit } from './types';\n\nexport interface MemoizeOptions {\n    maxSize?: number;\n    isEqual?(valueA: any, valueB: any): boolean;\n}\n\nexport default function memoize<T extends (...args: any[]) => any>(\n    fn: T,\n    options?: MemoizeOptions\n) {\n    const { maxSize, isEqual } = { maxSize: 0, isEqual: shallowEqual, ...options };\n    const cache = new Map();\n    const resolver = new CacheKeyResolver({\n        isEqual,\n        maxSize,\n        onExpire: key => cache.delete(key),\n    });\n    const memoized = lodashMemoize(fn, (...args) => resolver.getKey(...args));\n\n    memoized.cache = cache;\n\n    return memoized;\n}\n\nexport function memoizeOne<T extends (...args: any[]) => any>(\n    fn: T,\n    options?: Omit<MemoizeOptions, 'maxSize'>\n) {\n    return memoize(fn, { ...options, maxSize: 1 });\n}\n"]}