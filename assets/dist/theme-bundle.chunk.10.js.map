{"version":3,"sources":["webpack:///./assets/js/theme/category.js","webpack:///./assets/js/theme/common/url-utils.js","webpack:///./assets/js/theme/catalog.js","webpack:///./assets/js/theme/common/faceted-search.js"],"names":["Category","onReady","$","length","this","initFacetedSearch","onSortBySubmit","bind","hooks","on","$productListingContainer","$facetedSearchContainer","requestOptions","config","category","shop_by_price","products","limit","context","categoryProductsPerPage","template","productListing","sidebar","showMore","facetedSearch","FacetedSearch","content","html","animate","scrollTop","CatalogPage","urlUtils","getUrl","window","location","pathname","search","goToUrl","url","history","pushState","document","title","trigger","replaceParams","params","param","parsed","Url","parse","hasOwnProperty","query","format","buildQueryString","queryData","key","out","Array","isArray","ndx","substring","parseQueryParams","i","temp","split","push","event","href","queryParams","currentTarget","serialize","page","preventDefault","PageManager","callback","options","defaultOptions","accordionToggleSelector","blockerSelector","clearFacetSelector","componentSelector","facetNavListSelector","priceRangeErrorSelector","priceRangeFieldsetSelector","priceRangeFormSelector","priceRangeMaxPriceSelector","priceRangeMinPriceSelector","showMoreToggleSelector","facetedSearchFilterItems","modal","modalFactory","modalOpen","collapsedFacets","collapsedFacetItems","collapsibleFactory","initPriceValidator","each","index","navList","collapseFacetItems","accordionToggle","collapsible","data","isCollapsed","targetId","setTimeout","is","collapseAllFacets","onStateChange","onToggleClick","onAccordionToggle","onClearFacet","onFacetClick","onRangeSubmit","filterFacetItems","bindEvents","refreshView","restoreCollapsedFacets","restoreCollapsedFacetItems","updateView","show","api","getPage","err","hide","Error","expandFacetItems","$navList","id","attr","hasMoreResults","toggleFacetItems","getMoreFacetResults","facet","facetUrl","list_all","response","open","updateContent","$items","val","toLowerCase","element","text","indexOf","expandFacet","$accordionToggle","collapseFacet","close","expandAllFacets","validator","nod","selectors","errorSelector","fieldsetSelector","formSelector","maxPriceSelector","minPriceSelector","Validators","setMinMaxPriceValidation","priceRangeValidator","unbindEvents","off","stopPropagation","$toggle","$link","toggleClass","areAll","constants","VALID","decodeURI"],"mappings":"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","file":"theme-bundle.chunk.10.js","sourcesContent":["import { hooks } from '@bigcommerce/stencil-utils';\nimport CatalogPage from './catalog';\n// import compareProducts from './global/compare-products';\nimport FacetedSearch from './common/faceted-search';\n\nexport default class Category extends CatalogPage {\n    onReady() {\n        // compareProducts(this.context.urls);\n\n        if ($('#facetedSearch').length > 0) {\n            this.initFacetedSearch();\n        } else {\n            this.onSortBySubmit = this.onSortBySubmit.bind(this);\n            hooks.on('sortBy-submitted', this.onSortBySubmit);\n        }\n    }\n\n    initFacetedSearch() {\n        const $productListingContainer = $('#product-listing-container');\n        const $facetedSearchContainer = $('#faceted-search-container');\n        const productsPerPage = this.context.categoryProductsPerPage;\n        const requestOptions = {\n            config: {\n                category: {\n                    shop_by_price: true,\n                    products: {\n                        limit: productsPerPage,\n                    },\n                },\n            },\n            template: {\n                productListing: 'category/product-listing',\n                sidebar: 'category/sidebar',\n            },\n            showMore: 'category/show-more',\n        };\n\n        this.facetedSearch = new FacetedSearch(requestOptions, (content) => {\n            $productListingContainer.html(content.productListing);\n            $facetedSearchContainer.html(content.sidebar);\n\n            $('html, body').animate({\n                scrollTop: 0,\n            }, 100);\n        });\n    }\n}\n","import Url from 'url';\n\nconst urlUtils = {\n    getUrl: () => `${window.location.pathname}${window.location.search}`,\n\n    goToUrl: (url) => {\n        window.history.pushState({}, document.title, url);\n        $(window).trigger('statechange');\n    },\n\n    replaceParams: (url, params) => {\n        const parsed = Url.parse(url, true);\n        let param;\n\n        // Let the formatter use the query object to build the new url\n        parsed.search = null;\n\n        for (param in params) {\n            if (params.hasOwnProperty(param)) {\n                parsed.query[param] = params[param];\n            }\n        }\n\n        return Url.format(parsed);\n    },\n\n    buildQueryString: (queryData) => {\n        let out = '';\n        let key;\n        for (key in queryData) {\n            if (queryData.hasOwnProperty(key)) {\n                if (Array.isArray(queryData[key])) {\n                    let ndx;\n\n                    for (ndx in queryData[key]) {\n                        if (queryData[key].hasOwnProperty(ndx)) {\n                            out += `&${key}=${queryData[key][ndx]}`;\n                        }\n                    }\n                } else {\n                    out += `&${key}=${queryData[key]}`;\n                }\n            }\n        }\n\n        return out.substring(1);\n    },\n    parseQueryParams: (queryData) => {\n        const params = {};\n\n        for (let i = 0; i < queryData.length; i++) {\n            const temp = queryData[i].split('=');\n\n            if (temp[0] in params) {\n                if (Array.isArray(params[temp[0]])) {\n                    params[temp[0]].push(temp[1]);\n                } else {\n                    params[temp[0]] = [params[temp[0]], temp[1]];\n                }\n            } else {\n                params[temp[0]] = temp[1];\n            }\n        }\n\n        return params;\n    },\n};\n\nexport default urlUtils;\n","import PageManager from './page-manager';\nimport urlUtils from './common/url-utils';\nimport Url from 'url';\n\nexport default class CatalogPage extends PageManager {\n    onSortBySubmit(event) {\n        const url = Url.parse(window.location.href, true);\n        const queryParams = $(event.currentTarget).serialize().split('=');\n\n        url.query[queryParams[0]] = queryParams[1];\n        delete url.query.page;\n\n        event.preventDefault();\n        window.location = Url.format({ pathname: url.pathname, search: urlUtils.buildQueryString(url.query) });\n    }\n}\n","import { hooks, api } from '@bigcommerce/stencil-utils';\nimport _ from 'lodash';\nimport Url from 'url';\nimport urlUtils from './url-utils';\nimport modalFactory from '../global/modal';\nimport collapsibleFactory from './collapsible';\nimport { Validators } from './form-utils';\nimport nod from './nod';\n\n/**\n * Faceted search view component\n */\nclass FacetedSearch {\n    /**\n     * @param {object} requestOptions - Object with options for the ajax requests\n     * @param {function} callback - Function to execute after fetching templates\n     * @param {object} options - Configurable options\n     * @example\n     *\n     * let requestOptions = {\n     *      templates: {\n     *          productListing: 'category/product-listing',\n     *          sidebar: 'category/sidebar'\n     *     }\n     * };\n     *\n     * let templatesDidLoad = function(content) {\n     *     $productListingContainer.html(content.productListing);\n     *     $facetedSearchContainer.html(content.sidebar);\n     * };\n     *\n     * let facetedSearch = new FacetedSearch(requestOptions, templatesDidLoad);\n     */\n    constructor(requestOptions, callback, options) {\n        const defaultOptions = {\n            accordionToggleSelector: '#facetedSearch .accordion-navigation, #facetedSearch .facetedSearch-toggle',\n            blockerSelector: '#facetedSearch .blocker',\n            clearFacetSelector: '#facetedSearch .facetedSearch-clearLink',\n            componentSelector: '#facetedSearch-navList',\n            facetNavListSelector: '#facetedSearch .navList',\n            priceRangeErrorSelector: '#facet-range-form .form-inlineMessage',\n            priceRangeFieldsetSelector: '#facet-range-form .form-fieldset',\n            priceRangeFormSelector: '#facet-range-form',\n            priceRangeMaxPriceSelector: '#facet-range-form [name=max_price]',\n            priceRangeMinPriceSelector: '#facet-range-form [name=min_price]',\n            showMoreToggleSelector: '#facetedSearch .accordion-content .toggleLink',\n            facetedSearchFilterItems: '#facetedSearch-filterItems .form-input',\n            modal: modalFactory('#modal')[0],\n            modalOpen: false,\n        };\n\n        // Private properties\n        this.requestOptions = requestOptions;\n        this.callback = callback;\n        this.options = _.extend({}, defaultOptions, options);\n        this.collapsedFacets = [];\n        this.collapsedFacetItems = [];\n\n        // Init collapsibles\n        collapsibleFactory();\n\n        // Init price validator\n        this.initPriceValidator();\n\n        // Show limited items by default\n        $(this.options.facetNavListSelector).each((index, navList) => {\n            this.collapseFacetItems($(navList));\n        });\n\n        // Mark initially collapsed accordions\n        $(this.options.accordionToggleSelector).each((index, accordionToggle) => {\n            const $accordionToggle = $(accordionToggle);\n            const collapsible = $accordionToggle.data('collapsibleInstance');\n\n            if (collapsible.isCollapsed) {\n                this.collapsedFacets.push(collapsible.targetId);\n            }\n        });\n\n        // Collapse all facets if initially hidden\n        // NOTE: Need to execute after Collapsible gets bootstrapped\n        setTimeout(() => {\n            if ($(this.options.componentSelector).is(':hidden')) {\n                this.collapseAllFacets();\n            }\n        });\n\n        // Observe user events\n        this.onStateChange = this.onStateChange.bind(this);\n        this.onToggleClick = this.onToggleClick.bind(this);\n        this.onAccordionToggle = this.onAccordionToggle.bind(this);\n        this.onClearFacet = this.onClearFacet.bind(this);\n        this.onFacetClick = this.onFacetClick.bind(this);\n        this.onRangeSubmit = this.onRangeSubmit.bind(this);\n        this.onSortBySubmit = this.onSortBySubmit.bind(this);\n        this.filterFacetItems = this.filterFacetItems.bind(this);\n\n        this.bindEvents();\n    }\n\n    // Public methods\n    refreshView(content) {\n        if (content) {\n            this.callback(content);\n        }\n\n        // Init collapsibles\n        collapsibleFactory();\n\n        // Init price validator\n        this.initPriceValidator();\n\n        // Restore view state\n        this.restoreCollapsedFacets();\n        this.restoreCollapsedFacetItems();\n\n        // Bind events\n        this.bindEvents();\n    }\n\n    updateView() {\n        $(this.options.blockerSelector).show();\n\n        api.getPage(urlUtils.getUrl(), this.requestOptions, (err, content) => {\n            $(this.options.blockerSelector).hide();\n\n            if (err) {\n                throw new Error(err);\n            }\n\n            // Refresh view with new content\n            this.refreshView(content);\n        });\n    }\n\n    expandFacetItems($navList) {\n        const id = $navList.attr('id');\n\n        // Remove\n        this.collapsedFacetItems = _.without(this.collapsedFacetItems, id);\n    }\n\n    collapseFacetItems($navList) {\n        const id = $navList.attr('id');\n        const hasMoreResults = $navList.data('hasMoreResults');\n\n        if (hasMoreResults) {\n            this.collapsedFacetItems = _.union(this.collapsedFacetItems, [id]);\n        } else {\n            this.collapsedFacetItems = _.without(this.collapsedFacetItems, id);\n        }\n    }\n\n    toggleFacetItems($navList) {\n        const id = $navList.attr('id');\n\n        // Toggle depending on `collapsed` flag\n        if (_.includes(this.collapsedFacetItems, id)) {\n            this.getMoreFacetResults($navList);\n\n            return true;\n        }\n\n        this.collapseFacetItems($navList);\n\n        return false;\n    }\n\n    getMoreFacetResults($navList) {\n        const facet = $navList.data('facet');\n        const facetUrl = urlUtils.getUrl();\n\n        if (this.requestOptions.showMore) {\n            api.getPage(facetUrl, {\n                template: this.requestOptions.showMore,\n                params: {\n                    list_all: facet,\n                },\n            }, (err, response) => {\n                if (err) {\n                    throw new Error(err);\n                }\n\n                this.options.modal.open();\n                this.options.modalOpen = true;\n                this.options.modal.updateContent(response);\n            });\n        }\n\n        this.collapseFacetItems($navList);\n\n        return false;\n    }\n\n    filterFacetItems(event) {\n        const $items = $('.navList-item');\n        const query = $(event.currentTarget).val().toLowerCase();\n\n        $items.each((index, element) => {\n            const text = $(element).text().toLowerCase();\n            if (text.indexOf(query) !== -1) {\n                $(element).show();\n            } else {\n                $(element).hide();\n            }\n        });\n    }\n\n    expandFacet($accordionToggle) {\n        const collapsible = $accordionToggle.data('collapsibleInstance');\n\n        collapsible.open();\n    }\n\n    collapseFacet($accordionToggle) {\n        const collapsible = $accordionToggle.data('collapsibleInstance');\n\n        collapsible.close();\n    }\n\n    collapseAllFacets() {\n        const $accordionToggles = $(this.options.accordionToggleSelector);\n\n        $accordionToggles.each((index, accordionToggle) => {\n            const $accordionToggle = $(accordionToggle);\n\n            this.collapseFacet($accordionToggle);\n        });\n    }\n\n    expandAllFacets() {\n        const $accordionToggles = $(this.options.accordionToggleSelector);\n\n        $accordionToggles.each((index, accordionToggle) => {\n            const $accordionToggle = $(accordionToggle);\n\n            this.expandFacet($accordionToggle);\n        });\n    }\n\n    // Private methods\n    initPriceValidator() {\n        if ($(this.options.priceRangeFormSelector).length === 0) {\n            return;\n        }\n\n        const validator = nod();\n        const selectors = {\n            errorSelector: this.options.priceRangeErrorSelector,\n            fieldsetSelector: this.options.priceRangeFieldsetSelector,\n            formSelector: this.options.priceRangeFormSelector,\n            maxPriceSelector: this.options.priceRangeMaxPriceSelector,\n            minPriceSelector: this.options.priceRangeMinPriceSelector,\n        };\n\n        Validators.setMinMaxPriceValidation(validator, selectors);\n\n        this.priceRangeValidator = validator;\n    }\n\n    restoreCollapsedFacetItems() {\n        const $navLists = $(this.options.facetNavListSelector);\n\n        // Restore collapsed state for each facet\n        $navLists.each((index, navList) => {\n            const $navList = $(navList);\n            const id = $navList.attr('id');\n            const shouldCollapse = _.includes(this.collapsedFacetItems, id);\n\n            if (shouldCollapse) {\n                this.collapseFacetItems($navList);\n            } else {\n                this.expandFacetItems($navList);\n            }\n        });\n    }\n\n    restoreCollapsedFacets() {\n        const $accordionToggles = $(this.options.accordionToggleSelector);\n\n        $accordionToggles.each((index, accordionToggle) => {\n            const $accordionToggle = $(accordionToggle);\n            const collapsible = $accordionToggle.data('collapsibleInstance');\n            const id = collapsible.targetId;\n            const shouldCollapse = _.includes(this.collapsedFacets, id);\n\n            if (shouldCollapse) {\n                this.collapseFacet($accordionToggle);\n            } else {\n                this.expandFacet($accordionToggle);\n            }\n        });\n    }\n\n    bindEvents() {\n        // Clean-up\n        this.unbindEvents();\n\n        // DOM events\n        $(window).on('statechange', this.onStateChange);\n        $(document).on('click', this.options.showMoreToggleSelector, this.onToggleClick);\n        $(document).on('toggle.collapsible', this.options.accordionToggleSelector, this.onAccordionToggle);\n        $(document).on('keyup', this.options.facetedSearchFilterItems, this.filterFacetItems);\n        $(this.options.clearFacetSelector).on('click', this.onClearFacet);\n\n        // Hooks\n        hooks.on('facetedSearch-facet-clicked', this.onFacetClick);\n        hooks.on('facetedSearch-range-submitted', this.onRangeSubmit);\n        hooks.on('sortBy-submitted', this.onSortBySubmit);\n    }\n\n    unbindEvents() {\n        // DOM events\n        $(window).off('statechange', this.onStateChange);\n        $(document).off('click', this.options.showMoreToggleSelector, this.onToggleClick);\n        $(document).off('toggle.collapsible', this.options.accordionToggleSelector, this.onAccordionToggle);\n        $(document).off('keyup', this.options.facetedSearchFilterItems, this.filterFacetItems);\n        $(this.options.clearFacetSelector).off('click', this.onClearFacet);\n\n        // Hooks\n        hooks.off('facetedSearch-facet-clicked', this.onFacetClick);\n        hooks.off('facetedSearch-range-submitted', this.onRangeSubmit);\n        hooks.off('sortBy-submitted', this.onSortBySubmit);\n    }\n\n    onClearFacet(event) {\n        const $link = $(event.currentTarget);\n        const url = $link.attr('href');\n\n        event.preventDefault();\n        event.stopPropagation();\n\n        // Update URL\n        urlUtils.goToUrl(url);\n    }\n\n    onToggleClick(event) {\n        const $toggle = $(event.currentTarget);\n        const $navList = $($toggle.attr('href'));\n\n        // Prevent default\n        event.preventDefault();\n\n        // Toggle visible items\n        this.toggleFacetItems($navList);\n    }\n\n    onFacetClick(event) {\n        const $link = $(event.currentTarget);\n        const url = $link.attr('href');\n\n        event.preventDefault();\n\n        $link.toggleClass('is-selected');\n\n        // Update URL\n        urlUtils.goToUrl(url);\n\n        if (this.options.modalOpen) {\n            this.options.modal.close();\n        }\n    }\n\n    onSortBySubmit(event) {\n        const url = Url.parse(window.location.href, true);\n        const queryParams = $(event.currentTarget).serialize().split('=');\n\n        url.query[queryParams[0]] = queryParams[1];\n        delete url.query.page;\n\n        event.preventDefault();\n\n        urlUtils.goToUrl(Url.format({ pathname: url.pathname, search: urlUtils.buildQueryString(url.query) }));\n    }\n\n    onRangeSubmit(event) {\n        event.preventDefault();\n\n        if (!this.priceRangeValidator.areAll(nod.constants.VALID)) {\n            return;\n        }\n\n        const url = Url.parse(window.location.href, true);\n        let queryParams = decodeURI($(event.currentTarget).serialize()).split('&');\n        queryParams = urlUtils.parseQueryParams(queryParams);\n\n        for (const key in queryParams) {\n            if (queryParams.hasOwnProperty(key)) {\n                url.query[key] = queryParams[key];\n            }\n        }\n\n        urlUtils.goToUrl(Url.format({ pathname: url.pathname, search: urlUtils.buildQueryString(url.query) }));\n    }\n\n    onStateChange() {\n        this.updateView();\n    }\n\n    onAccordionToggle(event) {\n        const $accordionToggle = $(event.currentTarget);\n        const collapsible = $accordionToggle.data('collapsibleInstance');\n        const id = collapsible.targetId;\n\n        if (collapsible.isCollapsed) {\n            this.collapsedFacets = _.union(this.collapsedFacets, [id]);\n        } else {\n            this.collapsedFacets = _.without(this.collapsedFacets, id);\n        }\n    }\n}\n\nexport default FacetedSearch;\n"],"sourceRoot":""}